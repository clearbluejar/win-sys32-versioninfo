name: Generate Version Info

on:
  workflow_dispatch:
  
jobs:
  generate_versioninfo:
    strategy:
      matrix:
        #os: [windows-2019, windows-2022, win11-o365,win2022-azure-roles]
        os: [windows-2019, windows-2022]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    
    - name: install pip requirements
      run: |
        pip install -r requirements.txt
        
    # - name: Install PS Modules
    #   run: |
    #     # Set-PSRepository PSGallery -InstallationPolicy Trusted
    #     # Install-PackageProvider -Name NuGet -Force -Scope CurrentUser
    #     Install-Module -Name NtObjectManager -Force -Scope CurrentUser  -Confirm:$false 
    #     Set-GlobalSymbolResolver -DbgHelpPath 'C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\dbghelp.dll'
    
    - run: Set-MpPreference -DisableRealtimeMonitoring $true
      shell: powershell
      
    - name: Get machine info
      run: | 
        # Get OS information
        Get-CimInstance -Class Win32_OperatingSystem
        # Get Hard Disk Volumes
        Get-CimInstance -Class Win32_volume
        # Get Memory
        Get-CimInstance -Class Win32_physicalMemory
        # And Get CPU
        Get-CimInstance -Class Win32_Processor
        
    - name: Generate Proc Info
      run: |        
        .\gen_process.ps1 ${{ matrix.os }}
        
    - name: Generate System32 Program Files VersionInfo
      run: |

        .\get_verinfo.ps1 ${{ matrix.os }}

    # Upload Artifacts 
    - name: Upload VersionInfo Json
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: version-info-json-${{ matrix.os }}
        path: ./*.tar.gz
        retention-days: 5 
  
  # collect-files: 
  #   strategy:
  #     matrix:
  #       os: [windows-2019, windows-2022]
  #     fail-fast: false
  #   runs-on: ${{ matrix.os }}

  #   steps:
  #     - name: tar files
  #       run: |
  #         $ver = [System.Environment]::OSVersion.Version -join '.'
  #         $bin_types = "*.exe","*.dll","*.sys","*.winmd","*.cpl","*.ax","*.node","*.ocx","*.efi","*.acm","*.scr","*.tsp","*.drv"
  #         $allpaths_to_scan = "C:\Program*\Mi*","C:\Program*\Win*", "C:\Windows\System32\", "C:\Program*\Common*"
  #         $all_files = Get-ChildItem $allpaths_to_scan -Include $bin_types -Recurse -ErrorAction SilentlyContinue
  #         $all_files_tar_path = "${{ matrix.os }}-${ver}-versioninfo.json.tar.gz"     
  #         # write file paths to list     
  #         $all_files | select -ExpandProperty fullname | Out-File all_paths.txt
  #         echo taring $all_files.Count
  #         # tar all the things
  #         tar -czf $all_files_tar_path -T all_paths.txt

  #     - name: Upload files
  #       uses: actions/upload-artifact@v3        
  #       with:
  #         name: all_files
  #         path: ./*json.tar.gz
  #         retention-days: 5 

  gen-com-info:
    strategy:
      matrix:
        #os: [windows-2019, windows-2022, win11-o365,win2022-azure-roles]
        os: [windows-2019, windows-2022]
      
      fail-fast: false
    runs-on: ${{ matrix.os }}
        
    steps:
      - name: gen com
        run: |
          $ver = .\get_ver.ps1
          $com_json_path = "${runner}-${ver}-com.json"
          $all_com = Get-CimInstance -ClassName Win32_COMSetting | ? {$_.InprocServer32 -or $_.LocalServer32 } | ConvertTo-Json | Out-File $com_json_path
          tar -czf ($com_json_path + '.tar.gz') $com_json_path

      - name: Upload files
        uses: actions/upload-artifact@v4        
        with:
          name: com_info-${{ matrix.os }}
          path: ./*tar.gz
          retention-days: 5 
