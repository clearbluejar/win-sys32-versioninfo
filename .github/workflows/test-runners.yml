name: Test Run 200 - Generate Version Info

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  generate_versioninfo:
    strategy:
      matrix:
        os: [windows-2019, windows-2022]
        # need to separate by jobs
        # include:
        #   - os: [windows-2019, windows-2022]
        #     paths: [ "C:\\Windows\\System32\\", "C:\\Program*\\Common*"]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - run: Set-MpPreference -DisableRealtimeMonitoring $true
        shell: powershell

      - name: Get machine info
        run: |
          # Get OS information
          Get-CimInstance -Class Win32_OperatingSystem
          # Get Hard Disk Volumes
          Get-CimInstance -Class Win32_volume
          # Get Memory
          Get-CimInstance -Class Win32_physicalMemory
          # And Get CPU
          Get-CimInstance -Class Win32_Processor

      - name: install pip requirements
        run: |
          # ((Test-Path "$($env:ProgramData)\chocolatey\choco.exe"));# if ($? -eq $true) {echo asdfasdf}choco install pip
          pip install -r requirements.txt

      # - name: Install PS Modules
      #   run: |
      #     # Set-PSRepository PSGallery -InstallationPolicy Trusted
      #     # Install-PackageProvider -Name NuGet -Force -Scope CurrentUser
      #     Install-PackageProvider -Name NuGet -Force
      #     Install-Module -Name NtObjectManager -Force -Scope CurrentUser
      #     Set-GlobalSymbolResolver -DbgHelpPath 'C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\dbghelp.dll'

      - name: Generate Proc Info
        run: |
          # start as many things as possible
          $skip = ,"McpManagementService","McpManagementService (McpManagementService)"
          get-process
          Stop-Process -Name "devicecensus" -Force -ErrorAction SilentlyContinue
          Get-Service -ErrorAction SilentlyContinue | % { start-job -name $_.Name -ArgumentList @($_, $skip) -ScriptBlock { $service=$args[0];$skip=$args[1]; echo $service.Name; if ($skip.Contains($service.Name)) { continue }; Start-Service $service -ErrorAction SilentlyContinue} }   
          Get-Job
          sleep 30
          .\gen_process.ps1 ${{ matrix.os }}

      # - if: ${{ matrix.paths }}
      - name: Generate System32 Program Files VersionInfo
        run: |
          .\get_verinfo.ps1 ${{ matrix.os }} all 200

      # Upload Artifacts
      - name: Upload VersionInfo Json
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: version-info-json-${{ matrix.os }}
          path: ./*.tar.gz
          retention-days: 5

  # collect-files:
  #   strategy:
  #     matrix:
  #       os: [windows-2019, windows-2022]
  #     fail-fast: false
  #   runs-on: ${{ matrix.os }}

  #   steps:
  #     - name: tar files
  #       run: |
  #         $ver = [System.Environment]::OSVersion.Version -join '.'
  #         $bin_types = "*.exe","*.dll","*.sys","*.winmd","*.cpl","*.ax","*.node","*.ocx","*.efi","*.acm","*.scr","*.tsp","*.drv"
  #         $allpaths_to_scan = "C:\Program*\Mi*","C:\Program*\Win*", "C:\Windows\System32\", "C:\Program*\Common*"
  #         $all_files = Get-ChildItem $allpaths_to_scan -Include $bin_types -Recurse -ErrorAction SilentlyContinue
  #         $all_files_tar_path = "${{ matrix.os }}-${ver}-versioninfo.json.tar.gz"
  #         # write file paths to list
  #         $all_files | select -ExpandProperty fullname | Out-File all_paths.txt
  #         echo taring $all_files.Count
  #         # tar all the things
  #         tar -czf $all_files_tar_path -T all_paths.txt

  #     - name: Upload files
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: all_files
  #         path: ./*json.tar.gz
  #         retention-days: 5

  gen-com-info:
    strategy:
      matrix:
        os: [windows-2019, windows-2022]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - name: gen com
        run: |
          $com_json_path = "${{ matrix.os }}.com.json"
          $all_com = Get-CimInstance -ClassName Win32_COMSetting | ? {$_.InprocServer32 -or $_.LocalServer32 } | ConvertTo-Json | Out-File $com_json_path
          tar -czf ($com_json_path + '.tar.gz') $com_json_path

      - name: Upload files
        uses: actions/upload-artifact@v4
        with:
          name: com_info-${{ matrix.os }}
          path: ./*tar.gz
          retention-days: 5
